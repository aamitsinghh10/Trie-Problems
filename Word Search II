class Solution
{
    struct TrieNode{    
    char c;
    int endshere;
    string word;
    TrieNode *child[26];
};
struct TrieNode *getNode(char c)    //making new node for null case
{
    TrieNode *newnode = new TrieNode;
    newnode->c = c;
    newnode->endshere = 0;
    newnode->word = "";
    for(int i=0;i<26;++i)
        newnode->child[i] = NULL;
    return newnode;
}
TrieNode *root = getNode('/');  

void insert(string s)//insertion in trie
{
    TrieNode *curr=root;
    int index,i=0;
    while(s[i])
    {
        index = s[i]-'a';
        if(curr->child[index]==NULL)
        {
            curr->child[index] = getNode(s[i]);
        }
        curr=curr->child[index];
        i+=1;
    }
    curr->endshere += 1;
    curr->word = s;
}

void solve(vector<vector<char>>& board,int i,int j,int r,int c,vector<string>& ans,TrieNode *curr)
{
    int index = board[i][j]-'a';
    
    if(board[i][j]=='$' || curr->child[index]==NULL)  // if cell is already visited or null
        return;
    
    curr = curr->child[index];
    if(curr->endshere > 0)
    {
        ans.push_back(curr->word);
        curr->endshere -=1;
    }
    
    //Body
    char ch = board[i][j];   //Store current cell character
    board[i][j] = '$';  //Mark current cell character as visited
    
    if(i>0)     //top
        solve(board,i-1,j,r,c,ans,curr);
    if(i<r-1)   //Down
        solve(board,i+1,j,r,c,ans,curr);
    if(j>0)     //Left
        solve(board,i,j-1,r,c,ans,curr);
    if(j<c-1)   //Right
        solve(board,i,j+1,r,c,ans,curr);
    
    board[i][j] = ch;    //Mark current cell character as Unvisited by restoring the value
}

public:
vector<string> findWords(vector<vector<char>>& board, vector<string>& words)
{
     int r=board.size();
    int c=board[0].size();
    
    //Insert all words in TRIE
    for(int i=0;i<words.size();++i)
        insert(words[i]);
    
    vector<string> ans;
    
    for(int i=0;i<r;++i)//searching of words
    {
        for(int j=0;j<c;++j)
            solve(board,i,j,r,c,ans,root);
    }
    return ans;
}
};
